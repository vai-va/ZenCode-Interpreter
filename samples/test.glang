print("Failo nuskaitymas:");
string filedata = readf("Data.txt");
print(filedata);

print("");
print("+, -, *, /, % operacijos su int tipais:");
int a = 42;
int sum = 0;
print(a+sum);

print("");
print(">, <, ==, !=, <=, >= palyginimo operatoriai:");
if (a != 69) {
  print(1);
} else {
  print(2);
}

print("");
print("--, ++, +=, -=: operacijos");
int x = 5;
x -= 5;
print(x);

print("");
print("Ciklas:");
for (int i = 10; i > 1; i -= 3) {
    print(i);
}


print("");
print("Switch ir case:");
int num = 8;
switch(num)
{
   case 8 : print(8);

   case 7 : print(7);

   default : print(1);
}


print("");
print("String tipas ir jų lyginimas:");
string name1 = "vardas1";
string name2 = "vardas2";
string _name3 = "vardas1";

if (name1 == name2){
    print("Vardai name1 ir name2 yra vienodi");
}

if (name1 == _name3){
    print("Vardai name1 ir _name3 yra vienodi");
}


print("");
print("Unikali ZenFilter savybė:");
users = [{ name = "Alice", age = 25},
         { name = "Bob", age = 26},
         { name = "Bob", age = 25}];
let filter_rules = [{ type = "int", property = "age", value = "25"},
{ type = "string", property = "name", value = "Bob"}];
let filtered_users = ZenFilter(users, filter_rules);
print(filtered_users);


print("");
print("Fibonacci seka su ciklu:");
int fib = 1;
int prevFib = 1;
int temp = 0;
for(int j = 2; j < 20; j++)
{
    temp = fib;
    fib = fib + prevFib;
    prevFib = temp;
    print(fib);
}


print("");
print("Fibonacci seka su rekursija funkcijoje:");
func recursiveFibonacci(n) {
    if (n <= 1){
        return n;
    }
    return (recursiveFibonacci(n-1) + recursiveFibonacci(n-2));
}
for (int k = 2; k < 21; k++)
{
    print(recursiveFibonacci(k));
}


print("");
print("Void tipo funkcija:");
func voidFunction(){
    for (int h = 1; h < 6; h++){
        print(h);
    }
    return;
}
voidFunction();

print("");
print("Taip pat galimas rašymas į failą");
printf("test.txt", filtered_users);
